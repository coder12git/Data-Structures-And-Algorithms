There are 6 bitwise operators.
They give the result by considering the number in binary form.

----- Bitwise Operators -----
1. Bitwise AND operator - & ( Only give result 1 when both bits are 1 ((1,1)))
2. Bitwise OR  operator - | ( Give result as 1 when at least one bit is 1 ((1,0),(0,1),(1,1)))
3. Bitwise XOR operator - ^ ( Give result as 1 when both bits are different ((1,0),(0,1)))
4. Bitwise Left Shift operator - << (Shifs the bits to the left side and append zeroes at the end)
5. Bitwise Right Shift opertaor - >> ( Shifts the bits to the right side and append zeroes at the beginning)
--- Note ---
. x<<y = x*(2^y) (If leading y bits are zeroes in x)
. x>>y = [x/(2^y)]

x     y     x<<y                            x          y          x>>y (Floor value)
3     1      3                              33         1           16
3     2      12                             33         2            8
3     4      48                             33         4            2

Note - It's not recommended to use bitwise left and right shift operators on negative numbers because
it may be happen that compiler not folows the standard.

6. Bitwise NOT operator - ~ ( Defined different for signed and unsigned numbers.)
By default in C and C++ all the numbers are signed unless specify in the beginning that it is unsigned.

( 0 to ((2^32)-1))                                 ((-2^31) to ((2^31)-1))
~ on unsigned numbers                              ~ on signed numbers (If positive number given it converts into negative and vice versa)
unsigned (5) - 00____101                             5 - 00_____101
~(5) - 11_____010 = ((2^32-1)-5)                   ~(5) - ((2^32-1)-5) = (2^32-6)
~(5) = 4294967290                                  ~(5) - (-6) ( Here we are taking 2's complement of x = (2^32-x))

When all bits are 1 then the number is = (2^32-1) = 4294967295

Note - The result may vary for signed numbers using ~ operator, that's why not 
recommended to use ~ operator on signed numbers.